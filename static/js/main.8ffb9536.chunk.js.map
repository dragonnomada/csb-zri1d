{"version":3,"sources":["App.js","index.js"],"names":["APP_ID","app","Realm","getValidAccessToken","a","currentUser","logIn","anonymous","refreshCustomData","accessToken","client","ApolloClient","link","HttpLink","uri","fetch","options","headers","Authorization","cache","InMemoryCache","ADD_TODO_MUTATION","gql","TodoContext","React","createContext","AddTodo","useMutation","addTodo","error","loading","called","data","useState","title","setTitle","refreshTodos","useContext","inputRef","useRef","useEffect","console","log","current","focus","ref","placeholder","value","onChange","event","target","onKeyDown","key","variables","onClick","style","color","JSON","stringify","todo","UPDATE_TODO_MUTATION","Todo","updateTodo","display","alignItems","paddingRight","disabled","type","checked","query","_id","updateAt","Date","cursor","click","textDecoration","fontSize","createAt","toLocaleString","TODOS_QUERY","Todos","useLazyQuery","fetchTodos","refetch","count","setCount","subscribeRefreshTodos","id","setTimeout","clearTimeout","paddingBottom","todos","map","App","setRefreshTodos","Provider","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8ffb9536.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from \"react\";\n\nimport * as Realm from \"realm-web\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  gql,\n  HttpLink,\n  InMemoryCache,\n  useLazyQuery,\n  useMutation\n  // useQuery\n} from \"@apollo/client\";\n\nexport const APP_ID = \"application-0-rugmi\";\n\n// Connect to your MongoDB Realm app\nconst app = new Realm.App(APP_ID);\n// Gets a valid Realm user access token to authenticate requests\nasync function getValidAccessToken() {\n  // Guarantee that there's a logged in user with a valid access token\n  if (!app.currentUser) {\n    // If no user is logged in, log in an anonymous user. The logged in user will have a valid\n    // access token.\n    await app.logIn(Realm.Credentials.anonymous());\n  } else {\n    // An already logged in user's access token might be stale. To guarantee that the token is\n    // valid, we refresh the user's custom data which also refreshes their access token.\n    await app.currentUser.refreshCustomData();\n  }\n  return app.currentUser.accessToken;\n}\n// Configure the ApolloClient to connect to your app's GraphQL endpoint\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: `https://us-east-1.aws.realm.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`,\n    // We define a custom fetch handler for the Apollo client that lets us authenticate GraphQL requests.\n    // The function intercepts every Apollo HTTP request and adds an Authorization header with a valid\n    // access token before sending the request.\n    // credentials: \"same-origin\",\n    fetch: async (uri, options) => {\n      const accessToken = await getValidAccessToken();\n      options.headers.Authorization = `Bearer ${accessToken}`;\n      return fetch(uri, options);\n    }\n  }),\n  cache: new InMemoryCache()\n});\n\nconst ADD_TODO_MUTATION = gql`\n  mutation AddTodo($title: String!) {\n    todo: addSimpleTodo(input: $title) {\n      _id\n      title\n      checked\n      createAt\n      updateAt\n    }\n  }\n`;\n\nconst DEFAULT_POOL_TIME = 30;\n\nconst TodoContext = React.createContext({});\n\nfunction AddTodo() {\n  const [addTodo, { error, loading, called, data }] = useMutation(\n    ADD_TODO_MUTATION\n  );\n\n  const [title, setTitle] = useState(\"\");\n\n  const { refreshTodos } = useContext(TodoContext);\n\n  const inputRef = useRef();\n\n  useEffect(() => {\n    if (!loading && called) {\n      if (typeof refreshTodos === \"function\") {\n        console.log(\"main\", refreshTodos);\n        refreshTodos();\n        setTitle(\"\");\n        inputRef.current.focus();\n      }\n    }\n  }, [loading, called, refreshTodos]);\n\n  return (\n    <div>\n      <div>\n        <input\n          ref={inputRef}\n          placeholder=\"Escribe algo por hacer...\"\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === \"Enter\") {\n              if (title) {\n                addTodo({\n                  variables: {\n                    title\n                  }\n                });\n              }\n            }\n          }}\n        />\n        <button\n          onClick={() => {\n            if (title) {\n              addTodo({\n                variables: {\n                  title\n                }\n              });\n            }\n          }}\n        >\n          Agregar\n        </button>\n      </div>\n      {loading && <span>Agregando...</span>}\n      {error && <span style={{ color: \"red\" }}>{JSON.stringify(error)}</span>}\n      {data && (\n        <div>\n          <span>Se ha agregado \"{data.todo.title}\"</span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst UPDATE_TODO_MUTATION = gql`\n  mutation UpdateTodo($query: TodoQueryInput!, $todo: TodoUpdateInput!) {\n    todo: updateOneTodo(query: $query, set: $todo) {\n      _id\n      title\n      checked\n      createAt\n      updateAt\n    }\n  }\n`;\n\nfunction Todo({ todo }) {\n  const [updateTodo, { error, loading, called, data }] = useMutation(\n    UPDATE_TODO_MUTATION\n  );\n\n  const inputRef = useRef();\n\n  return (\n    <div\n      key={todo._id}\n      style={{\n        display: \"flex\",\n        alignItems: \"center\"\n      }}\n    >\n      <div\n        style={{\n          paddingRight: \"4px\"\n        }}\n      >\n        <input\n          ref={inputRef}\n          disabled={error || loading}\n          type=\"checkbox\"\n          checked={todo.checked}\n          onChange={(event) => {\n            // TODO: Update\n            updateTodo({\n              variables: {\n                query: {\n                  _id: todo._id\n                },\n                todo: {\n                  checked: event.target.checked,\n                  updateAt: new Date()\n                }\n              }\n            });\n          }}\n        />\n      </div>\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          inputRef.current.click();\n        }}\n      >\n        <div>\n          <span\n            style={{\n              textDecoration: todo.checked ? \"line-through\" : \"initial\"\n            }}\n          >\n            {todo.title}\n          </span>\n        </div>\n        <div>\n          <span style={{ fontSize: \"0.8em\", color: \"gray\" }}>\n            {new Date(\n              todo.updateAt || todo.createAt || new Date()\n            ).toLocaleString()}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst TODOS_QUERY = gql`\n  query {\n    todos {\n      _id\n      title\n      checked\n      createAt\n      updateAt\n    }\n  }\n`;\n\nfunction Todos() {\n  const [\n    fetchTodos,\n    { error, loading, data, called, refetch: refreshTodos }\n  ] = useLazyQuery(TODOS_QUERY);\n\n  const [count, setCount] = useState(DEFAULT_POOL_TIME);\n\n  const { subscribeRefreshTodos } = useContext(TodoContext);\n\n  useEffect(() => {\n    if (!loading && called) {\n      if (subscribeRefreshTodos) {\n        if (typeof refreshTodos === \"function\") {\n          console.log(\"updating refresh function\");\n          subscribeRefreshTodos(() => {\n            return () => {\n              refreshTodos();\n              setCount(DEFAULT_POOL_TIME);\n            };\n          });\n        }\n      }\n    }\n  }, [refreshTodos, loading, called]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  useEffect(() => {\n    let id = null;\n\n    if (count > 0 && !loading && called) {\n      id = setTimeout(() => {\n        setCount(count - 1);\n      }, 1000);\n    }\n\n    if (count <= 0 && !loading && called) {\n      console.log(\"refresh\");\n      refreshTodos();\n      setCount(DEFAULT_POOL_TIME);\n    }\n\n    return () => {\n      if (id) {\n        clearTimeout(id);\n      }\n    };\n  }, [count, called, loading]);\n\n  if (error)\n    return <span style={{ color: \"red\" }}>{JSON.stringify(error)}</span>;\n\n  if (loading) return <span>Cargando...</span>;\n\n  if (!data) return <span>Esperando...</span>;\n\n  return (\n    <div>\n      <div\n        style={{\n          paddingBottom: \"8px\"\n        }}\n      >\n        <button\n          disabled={!called}\n          onClick={() => {\n            console.log(\"rtt\", refreshTodos);\n            refreshTodos();\n            setCount(DEFAULT_POOL_TIME);\n          }}\n        >\n          Actualizar\n        </button>\n        <span>Se actualizará en {count}s</span>\n      </div>\n      {data.todos.map((todo) => {\n        return <Todo key={todo._id} todo={todo} />;\n      })}\n    </div>\n  );\n}\n\nexport default function App() {\n  const [refreshTodos, setRefreshTodos] = useState(null);\n\n  // useEffect(() => {\n  //   console.log(\"rt\", refreshTodos);\n  // }, [refreshTodos]);\n\n  return (\n    <ApolloProvider client={client}>\n      <TodoContext.Provider\n        value={{\n          refreshTodos,\n          subscribeRefreshTodos: setRefreshTodos\n        }}\n      >\n        <div className=\"App\">\n          <AddTodo />\n          <Todos />\n        </div>\n      </TodoContext.Provider>\n    </ApolloProvider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}